"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
var _1 = require("rxjs/");
var Toast = require("nativescript-toast");
var AppointmentService = (function () {
    function AppointmentService(http) {
        this.http = http;
        this.url = "https://tools.brandinstitute.com/wsbi/bimobile.asmx/";
        this.urlGetAppointments = "getAppointments";
        this.urlSetGeoLocation = "addGeoLocation";
        this.getExpensesByAppId = "getExpensesByAppointmentId";
        this._appointments = new _1.BehaviorSubject([]);
        // private latitude = 25.773338;
        // private longitude = -80.190072;
        this.monthNames = ["Jan", "Febr", "Mar", "Apr", "May", "Jun",
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        ];
        this._appointments = new _1.BehaviorSubject([]);
        this.appointments = this._appointments.asObservable();
    }
    AppointmentService.prototype.getAppointments = function (date) {
        var _this = this;
        var headers = new http_1.Headers({ 'content-type': 'application/x-www-form-urlencoded' });
        var body = new http_2.URLSearchParams();
        body.set('phoneId', localStorage.getItem('phoneNumber'));
        body.set('phoneIdType', "1");
        body.set('selDate', date);
        return this.http.post(this.url + this.urlGetAppointments, body.toString(), { headers: headers }).map(function (res) {
            var data = res.json();
            res.json().map(function (obj) {
                var dateTime = new Date(obj.AppDate);
                var hours = obj.AppDate.split('T')[1].toString();
                var time = hours.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [obj.AppDate];
                if (time.length > 1) {
                    time = time.slice(1); // Remove full string match value
                    time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM
                    time[0] = +time[0] % 12 || 12; // Adjust hours
                }
                var temp = dateTime.getDate().toString() + ',' + _this.monthNames[dateTime.getMonth()].toString() + '-' + time.join('');
                obj.AppDate = temp;
            });
            return data;
        });
    };
    AppointmentService.prototype.getAppointmentLocation = function (appointmentAddress) {
        return this.http.get("http://maps.googleapis.com/maps/api/geocode/json?address=" + appointmentAddress).map(function (res) { return res.json(); });
    };
    AppointmentService.prototype.setGeoLocation = function (location, appointment) {
        var dateTime = new Date();
        var dateahora = dateTime.getFullYear().toString() + '-' + (dateTime.getMonth() + 1).toString() + '-' + dateTime.getDate().toString() + ' ' +
            +dateTime.getHours().toString() + ':' + dateTime.getMinutes().toString() + ':' + dateTime.getSeconds().toString();
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        var body = new http_2.URLSearchParams();
        body.set('phoneId', localStorage.getItem('phoneNumber'));
        body.set('phoneIdType', "1");
        body.set('geoDate', dateahora);
        body.set('appId', appointment.AppId.toString());
        body.set('geoLatitude', location.latitude.toString());
        body.set('geoLongitude', location.longitude.toString());
        return this.http.post(this.url + 'addGeoLocation', body.toString(), { headers: headers }).map(function (res) { return res.json(); });
    };
    AppointmentService.prototype.saveExpense = function (appointment, imageBase64, recType, recTotal) {
        var headers = new http_1.Headers({ 'content-type': 'application/x-www-form-urlencoded' });
        var body = new http_2.URLSearchParams();
        body.set('phoneId', localStorage.getItem('phoneNumber'));
        body.set('phoneIdType', "1");
        body.set('appId', appointment.AppId.toString());
        // body.set('recType', recType);  use when real values in number come from dropdown
        body.set('recType', '1');
        body.set('recTotal', recTotal);
        body.set('imgType', 'base64');
        body.set('img', imageBase64);
        return this.http.post(this.url + 'addAppReceiptString', body.toString(), { headers: headers }).map(function (res) {
            res.json();
            imageBase64 = null;
        });
    };
    AppointmentService.prototype.getExpensesByAppointmentId = function (appid) {
        var headers = new http_1.Headers({ 'content-type': 'application/x-www-form-urlencoded' });
        var body = new http_2.URLSearchParams();
        body.set('phoneId', localStorage.getItem('phoneNumber'));
        body.set('phoneIdType', "1");
        body.set('appid', appid);
        return this.http.post(this.url + 'getExpensesByAppointmentId', body.toString(), { headers: headers }).map(function (res) { return res.json(); });
    };
    AppointmentService.prototype.testService = function () {
        android.nativeApp.IntentService.extend("com.tns.notifications.NotificationIntentService"
        /* give your class a valid name as it will need to be declared in the AndroidManifest later */ , {
            onHandleIntent: function (intent) {
                var action = intent.getAction();
                if ("ACTION_START" == action) {
                    // postNotification();
                    Toast.makeText("Action Started :)", "long").show();
                    var context = android.context;
                    var builder = new android.nativeApp.Notification.Builder(context);
                }
                else if ("ACTION_STOP" == action) {
                    /* get the system alarm manager and cancel all pending alarms, which will stop the service from executing periodically  */
                }
                android.context.support.v4.content.WakefulBroadcastReceiver.completeWakefulIntent(intent);
            }
        });
    };
    ;
    AppointmentService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], AppointmentService);
    return AppointmentService;
}());
exports.AppointmentService = AppointmentService;
//# sourceMappingURL=data:application/json;base64,